import 'switch_type.dart';

/// User profile model with custom ID patterns
class UserProfile {
  final String id;
  final String username;
  final String email;
  final String? displayName;
  final String? fullName;
  final String? location;
  final DateTime? createdAt;

  UserProfile({
    required this.id,
    required this.username,
    required this.email,
    this.displayName,
    this.fullName,
    this.location,
    this.createdAt,
  });

  factory UserProfile.fromJson(Map<String, dynamic> json) {
    return UserProfile(
      id: json['id'],
      username: json['username'],
      email: json['email'],
      displayName: json['display_name'],
      fullName: json['full_name'],
      location: json['location'],
      createdAt: json['created_at'] != null
          ? DateTime.parse(json['created_at'])
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'username': username,
      'email': email,
      'display_name': displayName,
      'full_name': fullName,
      'location': location,
      'created_at': createdAt?.toIso8601String(),
    };
  }
}

/// Home model (uses UUID for id)
class StreamlinedHome {
  final String id; // UUID generated by database
  final String userId;
  final String name;
  final String? description;
  final DateTime? createdAt;
  final List<StreamlinedRoom> rooms;
  final bool? isShared;
  final List<String>? sharingPermissions;

  StreamlinedHome({
    required this.id,
    required this.userId,
    required this.name,
    this.description,
    this.createdAt,
    this.rooms = const [],
    this.isShared,
    this.sharingPermissions,
  });

  factory StreamlinedHome.fromJson(Map<String, dynamic> json) {
    return StreamlinedHome(
      id: json['id'],
      userId: json['user_id'],
      name: json['name'],
      description: json['description'],
      createdAt: json['created_at'] != null
          ? DateTime.parse(json['created_at'])
          : null,
      rooms: json['rooms'] != null
          ? (json['rooms'] as List)
                .map((room) => StreamlinedRoom.fromJson(room))
                .toList()
          : [],
      isShared: json['is_shared'],
      sharingPermissions: json['sharing_permissions'] != null
          ? List<String>.from(json['sharing_permissions'])
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'user_id': userId,
      'name': name,
      'description': description,
      'created_at': createdAt?.toIso8601String(),
      'rooms': rooms.map((room) => room.toJson()).toList(),
      'is_shared': isShared,
      'sharing_permissions': sharingPermissions,
    };
  }
}

/// Room model (uses UUID for id)
class StreamlinedRoom {
  final String id; // UUID generated by database
  final String homeId;
  final String name;
  final String? description;
  final DateTime? createdAt;
  final List<StreamlinedBoard> boards;

  StreamlinedRoom({
    required this.id,
    required this.homeId,
    required this.name,
    this.description,
    this.createdAt,
    this.boards = const [],
  });

  factory StreamlinedRoom.fromJson(Map<String, dynamic> json) {
    return StreamlinedRoom(
      id: json['id'],
      homeId: json['home_id'],
      name: json['name'],
      description: json['description'],
      createdAt: json['created_at'] != null
          ? DateTime.parse(json['created_at'])
          : null,
      boards: json['boards'] != null
          ? (json['boards'] as List)
                .map((board) => StreamlinedBoard.fromJson(board))
                .toList()
          : [],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'home_id': homeId,
      'name': name,
      'description': description,
      'created_at': createdAt?.toIso8601String(),
      'boards': boards.map((board) => board.toJson()).toList(),
    };
  }
}

/// Board model with hardcoded ID pattern (BOARD_001, BOARD_002, etc.)
class StreamlinedBoard {
  final String id; // Like "BOARD_001"
  final String roomId;
  final String name;
  final String? description;
  final String status; // online, offline, maintenance
  final DateTime? lastOnline;
  final DateTime? createdAt;
  final List<StreamlinedSwitch> switches;

  StreamlinedBoard({
    required this.id,
    required this.roomId,
    required this.name,
    this.description,
    this.status = 'offline',
    this.lastOnline,
    this.createdAt,
    this.switches = const [],
  });

  factory StreamlinedBoard.fromJson(Map<String, dynamic> json) {
    return StreamlinedBoard(
      id: json['id'],
      roomId: json['room_id'],
      name: json['name'],
      description: json['description'],
      status: json['status'] ?? 'offline',
      lastOnline: json['last_online'] != null
          ? DateTime.parse(json['last_online'])
          : null,
      createdAt: json['created_at'] != null
          ? DateTime.parse(json['created_at'])
          : null,
      switches: json['switches'] != null
          ? (json['switches'] as List)
                .map((sw) => StreamlinedSwitch.fromJson(sw))
                .toList()
          : [],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'room_id': roomId,
      'name': name,
      'description': description,
      'status': status,
      'last_online': lastOnline?.toIso8601String(),
      'created_at': createdAt?.toIso8601String(),
      'switches': switches.map((sw) => sw.toJson()).toList(),
    };
  }

  bool get isOnline => status == 'online';
  bool get isOffline => status == 'offline';
}

/// Switch model with custom ID pattern (BOARD_001_switch_1, etc.)
class StreamlinedSwitch {
  final String id; // Like "BOARD_001_switch_1"
  final String boardId;
  final String name;
  final SwitchType type;
  final String? description;
  final int position; // 0, 1, 2, 3 for 4 switches
  final bool state;
  final DateTime? lastStateChange;
  final List<StreamlinedTimer> timers;

  StreamlinedSwitch({
    required this.id,
    required this.boardId,
    required this.name,
    this.type = SwitchType.light,
    this.description,
    required this.position,
    required this.state,
    this.lastStateChange,
    this.timers = const [],
  });

  factory StreamlinedSwitch.fromJson(Map<String, dynamic> json) {
    return StreamlinedSwitch(
      id: json['id'],
      boardId: json['board_id'],
      name: json['name'],
      type: SwitchType.values.firstWhere(
        (type) => type.name == (json['type'] ?? 'light'),
        orElse: () => SwitchType.light,
      ),
      description: json['description'],
      position: json['position'] ?? 0,
      state: json['state'] ?? false,
      lastStateChange: json['last_state_change'] != null
          ? DateTime.parse(json['last_state_change'])
          : null,
      timers: json['timers'] != null
          ? (json['timers'] as List)
                .map((timer) => StreamlinedTimer.fromJson(timer))
                .toList()
          : [],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'board_id': boardId,
      'name': name,
      'type': type.name,
      'description': description,
      'position': position,
      'state': state,
      'last_state_change': lastStateChange?.toIso8601String(),
      'timers': timers.map((timer) => timer.toJson()).toList(),
    };
  }

  StreamlinedSwitch copyWith({
    String? id,
    String? boardId,
    String? name,
    SwitchType? type,
    String? description,
    int? position,
    bool? state,
    DateTime? lastStateChange,
    List<StreamlinedTimer>? timers,
  }) {
    return StreamlinedSwitch(
      id: id ?? this.id,
      boardId: boardId ?? this.boardId,
      name: name ?? this.name,
      type: type ?? this.type,
      description: description ?? this.description,
      position: position ?? this.position,
      state: state ?? this.state,
      lastStateChange: lastStateChange ?? this.lastStateChange,
      timers: timers ?? this.timers,
    );
  }
}

/// Timer model for switch automation (uses UUID for id)
class StreamlinedTimer {
  final String id; // UUID generated by database
  final String switchId;
  final String userId;
  final String name;
  final String type; // 'on' or 'off'
  final String time; // HH:MM format
  final List<int> days; // [0,1,2,3,4,5,6] for Sun-Sat
  final bool isActive;
  final DateTime? createdAt;

  StreamlinedTimer({
    required this.id,
    required this.switchId,
    required this.userId,
    required this.name,
    required this.type,
    required this.time,
    required this.days,
    this.isActive = true,
    this.createdAt,
  });

  factory StreamlinedTimer.fromJson(Map<String, dynamic> json) {
    return StreamlinedTimer(
      id: json['id'],
      switchId: json['switch_id'],
      userId: json['user_id'],
      name: json['name'],
      type: json['type'],
      time: json['time'],
      days: List<int>.from(json['days']),
      isActive: json['is_active'] ?? true,
      createdAt: json['created_at'] != null
          ? DateTime.parse(json['created_at'])
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'switch_id': switchId,
      'user_id': userId,
      'name': name,
      'type': type,
      'time': time,
      'days': days,
      'is_active': isActive,
      'created_at': createdAt?.toIso8601String(),
    };
  }

  bool get isOnTimer => type == 'on';
  bool get isOffTimer => type == 'off';

  String get daysDisplay {
    if (days.length == 7) return 'Daily';
    if (days.length == 5 && days.every((day) => day >= 1 && day <= 5)) {
      return 'Weekdays';
    }
    if (days.length == 2 && days.contains(0) && days.contains(6)) {
      return 'Weekends';
    }

    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    return days.map((day) => dayNames[day]).join(', ');
  }
}

/// Home sharing model
class HomeSharing {
  final String id;
  final String homeId;
  final String sharedByUserId;
  final String sharedWithUserId;
  final List<String> permissions; // ['view', 'control', 'manage']
  final String status; // 'pending', 'accepted', 'declined'
  final String? message;
  final DateTime? createdAt;

  HomeSharing({
    required this.id,
    required this.homeId,
    required this.sharedByUserId,
    required this.sharedWithUserId,
    required this.permissions,
    required this.status,
    this.message,
    this.createdAt,
  });

  factory HomeSharing.fromJson(Map<String, dynamic> json) {
    return HomeSharing(
      id: json['id'],
      homeId: json['home_id'],
      sharedByUserId: json['shared_by_user_id'],
      sharedWithUserId: json['shared_with_user_id'],
      permissions: List<String>.from(json['permissions']),
      status: json['status'],
      message: json['message'],
      createdAt: json['created_at'] != null
          ? DateTime.parse(json['created_at'])
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'home_id': homeId,
      'shared_by_user_id': sharedByUserId,
      'shared_with_user_id': sharedWithUserId,
      'permissions': permissions,
      'status': status,
      'message': message,
      'created_at': createdAt?.toIso8601String(),
    };
  }

  bool get isPending => status == 'pending';
  bool get isAccepted => status == 'accepted';
  bool get isDeclined => status == 'declined';

  bool get canView => permissions.contains('view');
  bool get canControl => permissions.contains('control');
  bool get canManage => permissions.contains('manage');
}

/// Switch activity log model
class SwitchActivity {
  final String id;
  final String switchId;
  final String? userId;
  final String action; // 'turned_on', 'turned_off'
  final String triggeredBy; // 'manual', 'timer', 'physical'
  final String? userName;
  final DateTime createdAt;
  final String? switchName;
  final String? boardName;
  final String? roomName;

  SwitchActivity({
    required this.id,
    required this.switchId,
    this.userId,
    required this.action,
    required this.triggeredBy,
    this.userName,
    required this.createdAt,
    this.switchName,
    this.boardName,
    this.roomName,
  });

  factory SwitchActivity.fromJson(Map<String, dynamic> json) {
    return SwitchActivity(
      id: json['id'],
      switchId: json['switch_id'],
      userId: json['user_id'],
      action: json['action'],
      triggeredBy: json['triggered_by'] ?? 'manual',
      userName: json['user_name'] ?? json['user_profiles']?['username'],
      createdAt: DateTime.parse(json['created_at']),
      switchName: json['switches']?['name'],
      boardName: json['switches']?['boards']?['name'],
      roomName: json['switches']?['boards']?['rooms']?['name'],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'switch_id': switchId,
      'user_id': userId,
      'action': action,
      'triggered_by': triggeredBy,
      'user_name': userName,
      'created_at': createdAt.toIso8601String(),
      'switch_name': switchName,
      'board_name': boardName,
      'room_name': roomName,
    };
  }

  bool get isTurnedOn => action == 'turned_on' || action == 'timer_on';
  bool get isTurnedOff => action == 'turned_off' || action == 'timer_off';
  bool get isTimerAction => action.startsWith('timer_');
  bool get isManualAction => !isTimerAction;

  String get actionDisplay {
    switch (action) {
      case 'turned_on':
        return 'Turned ON';
      case 'turned_off':
        return 'Turned OFF';
      case 'timer_on':
        return 'Timer ON';
      case 'timer_off':
        return 'Timer OFF';
      default:
        return action.toUpperCase();
    }
  }
}
